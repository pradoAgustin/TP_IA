package backend;

import java.util.ArrayList;

public class Board {
	private Cell[][] matrix;
	private int paintedSquares;
	private Dot[]currentDots;
	private int rowSize;
	private int colSize;
	int calls;
	
	 private final static Direction[][] bestDirection = new Direction[][]{
		    /* 0 */ {Direction.UP, Direction.LEFT, Direction.DOWN, Direction.RIGHT},
		    /* 1 */ {Direction.UP, Direction.LEFT, Direction.RIGHT, Direction.DOWN},
		    /* 2 */ {Direction.UP, Direction.RIGHT, Direction.DOWN, Direction.LEFT},
		    /* 3 */ {Direction.LEFT, Direction.UP, Direction.DOWN, Direction.RIGHT},
		    /* 4 */ {Direction.RIGHT, Direction.UP, Direction.DOWN, Direction.LEFT},
		    /* 5 */ {Direction.DOWN, Direction.LEFT, Direction.UP, Direction.RIGHT},
		    /* 6 */ {Direction.DOWN, Direction.LEFT, Direction.RIGHT, Direction.UP},
		    /* 7 */ {Direction.DOWN, Direction.RIGHT, Direction.UP, Direction.LEFT}
		    };
	
	
	
	public Board(Cell[][] board,Dot[] dots){
		this.matrix=board;
		this.currentDots=dots;
		setRowSize(matrix.length);
		setColSize(matrix[0].length);
		calls=0;
		
	}



	public Cell[][] getMatrix() {
		return this.matrix;
	}
	
	public boolean isOrigin(int row,int col,int color){
		for(Dot d:currentDots){
			if(d.getColor() == color){
				return d.getStart().col == col && d.getStart().row == row;
			}
		}
		return false;
	}
	
	public boolean isEnd(int row,int col,int color){
		for(Dot d : currentDots){
			if(d.getColor() == color){
				return d.getEnd().col == col && d.getEnd().row == row;
			}
		}
		return false;
	}



	public int getRowSize() {
		return rowSize;
	}



	public void setRowSize(int rowSize) {
		this.rowSize = rowSize;
	}



	public int getColSize() {
		return colSize;
	}



	public void setColSize(int colSize) {
		this.colSize = colSize;
	}
	
	
	
}
